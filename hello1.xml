<sect1><title>引子</title>
<sect2><title>一个简单示例</title>
<para>
计算机语言中第一个示例通常叫做Hello World，但是对于汇编语言一个更精简的示例如下：
<programlisting><![CDATA[
.section .data			#定义数据段

.section .text			#定义代码段
.globl _start			#_start指明程序的入口
_start:				#.globl说明将被外部引用
movl $0, %ebx			#sys_exit系统调用的参数

movl $1, %eax			#sys_exit的系统调用号

int $0x80			#通过int 80使能内核调用
]]></programlisting>	
</para>
<para>
一个最简单的运行在Linux系统上的汇编程序只需要3行，除了movl $4, %ebx这行可以去掉外，
我们不能再做任何精简。汇编语言使用既有的约定来和C语言中的函数相互传递参数，对于
i386汇编来说，使用eax来传递系统调用号，使用ebx来传递第一个参数，依次类推，直至参数
多到需要使用数据栈来传递。因此移除movl $4, %ebx使得sys_exit调用的参数不确定，但这
并不影响它的正确执行。 
</para>
<para>
这个文件被命名为hello.S，它采用了最通用的PC机上的i386系列CPU的汇编语法intell语法。 
使用以下命令编译：
<programlisting><![CDATA[
#as hello.S -o hello.o		#汇编成目标.o文件，所有段基地址均为0
#ld hello.o -o hello		#链接为可重定位文件
]]></programlisting>
</para>
<para>
一个错误的编译方法如下，gcc在链接时总是尝试查找编译的目标文件中的入口函数main，
而_start 定义在libc的动态库中，入口函数main作为_start的子函数被调用，类似于exit(main())。
<programlisting><![CDATA[
#gcc -o hello hello.S
/tmp/ccUDvSyN.o: In function `_start':
(.text+0x0): multiple definition of `_start'
/usr/bin/ld: /usr/lib/debug/usr/lib/crt1.o(.debug_info): relocation 0 has invalid symbol index 12
/usr/bin/ld: /usr/lib/debug/usr/lib/crt1.o(.debug_info): relocation 1 has invalid symbol index 13
......
/usr/lib/gcc/i686-linux-gnu/4.4.5/../../../../lib/crt1.o: In function `_start':
(.text+0x18): undefined reference to `main'
collect2: ld returned 1 exit status
]]></programlisting>	
</para>
<para>
使用file查看生成的文件类型: 
<programlisting><![CDATA[
#file hello
hello: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), statically linked, not stripped
]]></programlisting>
</para>
<para>
sys_exit与其他的系统调用不同，它是系统中唯一个结束当前进程的系统调用，通过它将
关闭程序使用的描述符，回收未释放的动态空间，清理内核维护的其他相关资源，其中包
括释放task_struct。任何一个应用程序最终都会调用sys_exit，无论它是用C语言，还是
语言写成。如果尝试使用汇编书写一个没有使用sys_exit的程序，那么运行时将会出
现段错误：取指令系统不停的使程序计数器PC(program counter) 指向下一条指令的地址
，而下一条指令总会超出代码段的范围。
<note>Linux中的汇编器采用AT&amp;T语法，它与intel语法不同。</note>	
</para>
<para>
	ARM平台上的CPU需要ARM指令来完成，一个完成类似功能的示例如下：
<programlisting><![CDATA[
.section .data

.section .text
.global _start
_start:
mov r0, #0			@sys_exit系统调用的参数
mov r7, #1			@sys_exit的系统调用号
svc 0x00000000			@通过svc使能内核调用
]]></programlisting>
</para>
<para>
ARM平台的调用系统调用的方式与i386平台并没有本质的区别，它们只是在指令的标记方法
和寄存器的使用上不同。ARM上的汇编语言与C函数的互相调用的约定被称为ATPCS。 
</para>
<para>
另外不得不提到的ABI(Application Binary Interface)应用程序二进制接口，它对应用程序
系统，应用程序与库之间的访问方法作了一系列的规定。对于ARM来说，它有两种接口OABI
和EABI，OABI中的O意味Old，也即老的访问方式，EABI中的E意味Extended，也即新式的访问
方式，内核中的配置要和对应的编译器的配置相一致，这样编译器编译出的应用程序才能在该
核系统上运行。上面的例子对因EABI访问方式，对于OABI的例子如下： 	
<programlisting><![CDATA[
......
_start:
mov r0, #0			@sys_exit系统调用的参数
swi 0x90000001 			@0x900000000是Magic，1为sys_exit的系统调用号
]]></programlisting>
swi（Software Interrupt Instruction）软中断指令实际通过调用特权模式指令svc来实现。
OABI已被更高效的EABI所取代。 
<para>
资源 
<ulink url="http://blog.ednchina.com/farsight2009/2079778/message.aspx"></ulink>
<ulink url="href='http://6xudonghai.blog.163.com/blog/static/33640629201072993838620/"></ulink>
<ulink url="href='http://bbs.chinaunix.net/thread-1950213-1-1.html"></ulink>
<ulink url="href='http://www.cublog.cn/u2/61062/showart_1958033.html"></ulink>
</para>
</para>
<para>	
ARM上的汇编程序对应的编译命令如下: 
<programlisting><![CDATA[
#arm-linux-as hello.S -o hello.o
#arm-linux-ld hello.o -o hello
]]></programlisting>
</para>
<para>
使用file查看生成的文件类型: 
<programlisting><![CDATA[
#file hello
hello: ELF 32-bit LSB executable, ARM, version 1 (SYSV), statically linked, not stripped
]]></programlisting>
</para>
<para>
对比i386平台的可执行程序，可以看到Intel 80386和ARM的区别。另外对比i386和ARM汇编对
sys_exit调用的方法可以得出ARM使用r7寄存器来传递系统调用号，使用r0来传递一个参数。 	
</para>
</sect2>
<sect2><title>Hello World!</title>
<para>
一个真正的Hello World!程序将证实汇编程序的运行，它的源码如下： 
<programlisting><![CDATA[
.section .data
msg: .asciz "Hello World!\n" @as .ascii, but with a zero byte
len= .-msg

.section .text
.align 2
.global _start
_start:
/* set parametes of sys_write*/
mov r0, #1     	@print out from stdout
ldr r1, =msg   	@addr of msg
mov r2, #len   	@length of msg

mov r7, #4     	@do sys_write
svc 0x00000000

/* the returned value have stored in r0 */
mov r7, #1     	@do sys_exit 
svc 0x00000000
]]></programlisting>
<note>如果使用adr r1, msg代替这里的ldr r1, =msg，需要注意它们的区别，adr伪指令不能
跨段使用，更准确的是不能跨越页。所以需要去掉.section .data声明。</note>
</para>
<para>运行的结果如下： 
<programlisting><![CDATA[
#./hello
Hello World!
]]></programlisting>	
</para>
<para>
任何试图通过纯汇编语言编写而不进行sys_exit系统调用的可执行文件，在Linux系统上运行是不
可能的。一个可执行文件，通常为ELF格式，运行时它被内核ELF加载器加载，并分配资源，一个
task_sruct被内核记录到一个描述当前所有进程结构体的全局链表中。任何试图释放这些资源的
指令操作都必须在特权级别，而运行在用户空间中的可执行文件是做不到的。 
</para>
<para>
一个直接运行在硬件平台上的程序，通常为原始的BIN文件，它的第一个字节就是指令，所以是
不需要加载器的，所以程序退出可以在任何时候，没有人关心它何时结束。这与ELF的运行方式
截然不容。 
</para>
<para>
既然牵涉到系统调用，那么就必须考虑汇编与C语言的交互，另外在C中嵌入汇编语言是另一种对
汇编的应用，它们在内核的底层代码中相当广泛，它是汇编与C语言交互的另一种更普遍的形式。
以它们交互的约定是关注的重点，对于ARM来说它就是过程调用标准ATPCS<footnote><para>2007年，ARM公司推出了新的AAPCS（ARM Architecture Produce Call Standard）标准,它只是改进了原有的ATPCS的二进制代码的兼容性。</para></footnote>。
</para>
</sect2>
<sect2><title>.align伪操作</title>
<para>
一个值得讨论的伪操作是.align，它可能在很多时候不被人注意，但是不恰当的使用将导致程序
无法运行，这种可能性在ARM系统上几乎是百分之百的发生。
</para>
<para>
.align的作用在于对指令或者数据的存放地址进行对齐，有些CPU架构要求固定的指令长度并且存放地址相对于2的幂指数圆整，否则程序无法正常运行，比如ARM；有些系统却不需要，如果不遵循地址的圆整规则，程序依然可以正确执行，只是降低了一些执行效率，比如i386。.align的作用范围只限于紧跟它的那条指令或者数据，而接下来的指令或者数据的地址由上一条指令的地址和其长度决定。这里给出一个很好的用来测试.align作用的例子，首先在i386上进行测试。
<programlisting><![CDATA[
.section .text                  #定义代码段
data:
.byte 0x11
.align 2

.globl _start
_start:
 movl data, %ebx
 movl $1, %eax
 int $0x80
]]></programlisting>
这个程序没有实际的应用意义。为了防止编译出的目标文件中不同的段均从0开始而看不到.align的效果，这里只定义一个代码段，.byte数据将被编译进代码段，_start中的第一条指令将紧跟在0x11数据之后，我们使用 as -o test.o test.S &amp;&amp; objdump -D test.o来查看反汇编的结果：
<programlisting><![CDATA[
Disassembly of section .text:

00000000 <data>:
   0:	11 8d 76 00 bb 00    	adc    %ecx,0xbb0076(%ebp)

00000004 <_start>:
   4:	bb 00 00 00 00       	mov    $0x0,%ebx
   9:	a1 00 00 00 00       	mov    0x0,%eax
   e:	cd 80                	int    $0x80
]]></programlisting>
objdump尝试将代码段中的所有二进制数据当作指令解析，所以不要关心非代码段反汇编后的指令adc    %ecx,0xbb0076(%ebp)。我们需要关心的是mov    $0x0,%ebx所在的地址4，显然它和.align指定的4可以除尽，也即相对齐于4的倍数的地址。为了作一比较，移除.align 4，得到以下的反汇编结果，显然此时的第一条mov指令的对齐地址是1。
<programlisting><![CDATA[
Disassembly of section .text:

00000000 <data>:
   0:	11 bb 00 00 00 00    	adc    %edi,0x0(%ebx)

00000001 <_start>:
   1:	bb 00 00 00 00       	mov    $0x0,%ebx
   6:	a1 00 00 00 00       	mov    0x0,%eax
   b:	cd 80                	int    $0x80
]]></programlisting>

对于i386编译器来说.align的参数4直接指明了对齐地址的圆整目标，汇编器总是要找到下一个可以整除该参数的地址作为.align后的那条指令的存放地址。.align参数的取值必须是2的幂指数，2^0到2^31都是合法的，而其它的值将会遭遇编译错误的提示：
<programlisting><![CDATA[
# as -o test.o test.S
test.S: Assembler messages:
test.S:4: Error: alignment not a power of 2
]]></programlisting>
</para>
<para>
对于ARM编译器来说.align的用法和i386有相当大的差异，这也就是.align被混乱使用的根本原因。将上面的汇编程序改成ARM平台的汇编语言后的结果如下：
<programlisting><![CDATA[
.section .test
data:
.byte 0x11
.align 2

.global _start
_start:
 mov r0, #data          
 mov r7, #1    
 svc 0x00000000
]]></programlisting>
与它对应的反编译结果如下：
<programlisting><![CDATA[
# arm-linux-as asm.S -o asm.o && arm-linux-objdump -D asm.o 
......
Disassembly of section .test:

00000000 <data>:
   0:	00000011 	.word	0x00000011
	...

00000010 <_start>:
  10:	e3a00000 	mov	r0, #0	; 0x0
  14:	e3a07001 	mov	r7, #1	; 0x1
  18:	ef000000 	svc	0x00000000
  1c:	00000000 	andeq	r0, r0, r0
Disassembly of section .ARM.attributes:
......
]]></programlisting>
出乎意料的是mov	r0,4 #0指令的地址是0x10，也即16，不是4。ARM汇编器并不直接使用.align提供的参数作为对齐目标，而是使用2^n的值，比如这里的参数为4，那么圆整对象为2^4 = 16。这也就是为什么在ARM平台的Uboot或者Linux内核汇编中会出现.align 5的根本原因。.align此时的取值范围为0-15，当取值为0，2或者不提供参数时均圆整于4。如果尝试使用大于15的值，将会得到编译器的如下抱怨：
<programlisting><![CDATA[
# arm-linux-as asm.S -o asm.o
asm.S: Assembler messages:
asm.S:4: Error: alignment too large: 15 assumed
]]></programlisting>
另一点需要注意的是：ARM尝试使用0来填充.byte占用的一个字(ARM平台为4bytes)中剩余的比特位，但是其余的字将会用nop指令填充，这一点与i386也是不同的。以上的讨论关注于目标文件.o，而非最终的可执行文件，一个对于链接器的猜疑是它会不会改变我们的圆整目标，庆幸的是它不会，它会找到当前.o文件中的最大圆整值，并且以它的倍数偏移。由ARM支持非对齐地址的访问，所以指定指令的对齐即可保证程序的正确执行，但要保证程序的访问效率，对数据的对齐也是尤为重要。
</para>
<para>
如果分析过Uboot，可能会遇到类似.balignl的操作，对于是用如此生僻指令的开发习惯，这并不是好的做法，除非是迫不得已，否则它可以用更通用的指令代替。.balignl指令是.balign指令的变体，一个完整的指令是格式如下：
<programlisting><![CDATA[
.balign[wl] align, fill_value, max_padding
]]></programlisting>
.balign的所有参数均是可选的，align参数类细雨.align伪指令参数，但是这里它直接作为对齐参数，类似于i386平台的.align参数。fill_value用来填充空白字节的值，没有提供该参数，默认将是用nop指令填充。max_padding指定了最多可填充的字节数，如果实际需要填充的字节数大于该值那么整个.balign伪指令将失效。.balign使用字节来填充，比如.balign 4,0x10；.balignw使用双字节来填充，比如.balignw 4,0x1122;.balignl使用四字节来填充，比如.balignl 4,0x11223344。注意所有需要填充的字节数必须是[wl]参数指定的整倍数，否则将遭遇汇编器的抱怨：
<programlisting><![CDATA[
.byte 0x11
.balignl 16,0x33445566

.global _start
_start:
 mov r7, #1
 swi 0x0000000

# arm-linux-as arm.S  -o arm.o
arm.S: Assembler messages:
arm.S:3: Error: alignment padding (15 bytes) not a multiple of 4
arm.S:3: Error: alignment padding (15 bytes) not a multiple of 4
]]></programlisting>
为了保证整倍数关系，如果删除.byte 0x11或者改成如下代码，抱怨将消失：
<programlisting><![CDATA[
.byte 0x11
.ascii "123"
.balignl 16,0x33445566

.global _start
_start:
 mov r7, #1
 swi 0x0000000

# arm-linux-as arm.S  -o arm.o
]]></programlisting>
<note>.ascii和.asciz的区别是，.asciz会在字符串后自动添加结束符\0.</note>
<para>
<tip>资源：
<ulink url="http://sourceware.org/binutils/docs/as/">GNU AS汇编器官方文档</ulink></tip>
</para>
</para>
</sect2>
</sect1>
