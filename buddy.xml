<sect1><title>伙伴系统</title>
本文基于内核3.0.1版本。
<sect2><title>初始化zone</title>
<programlisting><![CDATA[
start_kernel->start_arch->paging_init->bootmem_init->arm_bootmem_free->free_area_init_node
->free_area_init_core-->set_pageblock_order
                     |->setup_usemap
                     `->init_currently_empty_zone->zone_init_free_lists
]]></programlisting>
由于伙伴系统基于Bootmem机制来分配一些必须的数据结构，并且从Bootmem通过位图管理的页面中接管所有空闲未分配的内存，所以伙伴系统的初始化相关的动作都是建立在Bootmem机制上的。在Bootmem初始化的晚些时候会调用free_area_init_node来对所有内存区对应的struct zone结构体进行初始化，其中包括关键的伙伴系统的核心：free_area结构体。
<programlisting><![CDATA[
include/linux/mmzone.h
#ifndef CONFIG_FORCE_MAX_ZONEORDER
#define MAX_ORDER 11
#else
#define MAX_ORDER CONFIG_FORCE_MAX_ZONEORDER
#endif
#define MAX_ORDER_NR_PAGES (1 << (MAX_ORDER - 1))

struct zone {
	/* Fields commonly accessed by the page allocator */

	/* zone watermarks, access with *_wmark_pages(zone) macros */
	unsigned long watermark[NR_WMARK];
......
	spinlock_t		lock;
	struct free_area	free_area[MAX_ORDER];
......
	unsigned long		pages_scanned;	   /* since last reclaim */
	unsigned long		flags;		   /* zone flags, see below */

	/* Zone statistics */
	atomic_long_t		vm_stat[NR_VM_ZONE_STAT_ITEMS];
.....
} ____cacheline_internodealigned_in_smp;
]]></programlisting>
MAX_ORDER的值可以通过定义CONFIG_FORCE_MAX_ZONEORDER来设置，否则默认值为11，它的有效取值范围为[11,，64]，不同的体系架构，其默认值可能不同。它是内存块的阶数，决定了free_area的个数，它也决定了伙伴系统中，最大内存块的页面数：2<superscript>order-1</superscript>，也即MAX_ORDER_NR_PAGES。free_area的下标与该链表中的内存块大小存在2的阶的关系。伙伴系统对于free_area的组织如下图所示：
<figure><title>free_area组织图</title><graphic fileref="images/buddy/free_area.gif"/></figure>
nr_free指定了当前阶的内存链表中空闲页块的数目，对于0阶内存区逐页计算，对1阶内存区计算双页的数目，依次类推。
<programlisting><![CDATA[
struct free_area {
	struct list_head	free_list[MIGRATE_TYPES];
	unsigned long		nr_free;
};
]]></programlisting>
<para>为了减少内存碎片的产生，每一个free_area又分成了MIGRATE_TYPES个不同的链表。内核碎片的产生在于一个小的内存块一旦被分配出去，那么原来的大的内存块就要分裂，可供使用的大内存块就要减少，而大内存总是能满足给类内存块的分配，而小内存块却不能，所以伙伴系统的首要目标就是可能的情况下尽量保证大内存块的个数。反碎片的工作原理是什么？
	</para>	
	<para>
内核将已分配页或分为如下3种不同类型：
<itemizedlist>
	<listitem>不可移动页：在内存中有固定位置，不能移动到其他地方。内心内核分配的大多数内存属于该类型。</listitem>
	<listitem>可回收页：不能直接移动，但是可以删除，其内容可以从某些源重新生成。例如，映射自文件的数据属于该类型。kswapd守护京城会根据可回收页访问的频繁程度，周期性释放此类内存。</listitem>
	<listitem>可移动页，可以随意地移动。属于用户空间应用程序的页属于该类型。它们是通过页表映射的。如果它们复制到新位置，页表项可以相应地更新，应用程序不会注意到任何事情。</listitem>
</itemizedlist>
<programlisting><![CDATA[
#define MIGRATE_UNMOVABLE     0 /* 不可移动页面 */
#define MIGRATE_RECLAIMABLE   1 /* 可回收页面 */
#define MIGRATE_MOVABLE       2 /* 可移动页面 */
#define MIGRATE_PCPTYPES      3 /* the number of types on the pcp lists */
#define MIGRATE_RESERVE       3 /* 保留页面 */
#define MIGRATE_ISOLATE       4 /* can't allocate from here */
#define MIGRATE_TYPES         5
]]></programlisting>
内核使用的反碎片技术，即基于将具有相同可移动性的页分组的思想，这样碎片集中在不可移动页的内存块上，而不会扩散。另外，如果从具有可移动性的页面分配内存失败，紧急情况下可以从保留页面分配。MIGRATE_ISOLATE用于扩月NUMA节点移动物理内存页。
<programlisting><![CDATA[
#define for_each_migratetype_order(order, type) \
	for (order = 0; order < MAX_ORDER; order++) \
		for (type = 0; type < MIGRATE_TYPES; type++)
		
static void __meminit zone_init_free_lists(struct zone *zone)
{
	int order, t;
	for_each_migratetype_order(order, t) {
		INIT_LIST_HEAD(&zone->free_area[order].free_list[t]);
		zone->free_area[order].nr_free = 0;
	}
}
]]></programlisting>
初始化可分配内存区的管理链表数组free_area的函数，非常简单，并且对于遍历该数组以及其中的所有链表提供了一个简便的宏for_each_migratetype_order。
</para>
<sect3><title>setup_usemap</title>

</sect3>
</sect2>
<sect2><title>收集空闲内存</title>
<programlisting><![CDATA[
start_kernel->mm_init->mem_init-->free_unused_memmap
                               |->free_all_bootmem->free_all_bootmem_core
                               |->free_highpages (CONFIG_HIGHMEM)
                               |->for_each_bank->PageReserved
                               `->for_each_memblock->printk(KERN_INFO "Memory:")
]]></programlisting>
free_all_bootmem用来释放当前Bootmem机制管理的当前内存区zone中的node_bootmem_map未标记为1的页面，即将该页面对应的struct page中的flags清0，对该页面的引用计数_count也被清0。
<programlisting><![CDATA[
/*
 * This function checks whether a page is free && is the buddy
 * we can do coalesce a page and its buddy if
 * (a) the buddy is not in a hole &&
 * (b) the buddy is in the buddy system &&
 * (c) a page and its buddy have the same order &&
 * (d) a page and its buddy are in the same zone.
 *
 * For recording whether a page is in the buddy system, we set ->_mapcount -2.
 * Setting, clearing, and testing _mapcount -2 is serialized by zone->lock.
 *
 * For recording page's order, we use page_private(page).
 */
static inline int page_is_buddy(struct page *page, struct page *buddy,
								int order)
{
	if (!pfn_valid_within(page_to_pfn(buddy)))
		return 0;

	if (page_zone_id(page) != page_zone_id(buddy))
		return 0;

	if (PageBuddy(buddy) && page_order(buddy) == order) {
		VM_BUG_ON(page_count(buddy) != 0);
		return 1;
	}
	return 0;
}
]]></programlisting>
</sect2>
<sect2><title>vmalloc</title>
vmalloc与kmalloc和伙伴系统的关系如下图所示：
<figure><title>vmalloc和kmalloc，伙伴系统关系图</title><graphic fileref="images/buddy/vmalloc.gif"/></figure>
<programlisting><![CDATA[
struct vm_struct {
	struct vm_struct	*next;
	void			*addr;
	unsigned long		size;
	unsigned long		flags;
	struct page		**pages;
	unsigned int		nr_pages;
	phys_addr_t		phys_addr;
	void			*caller;
};
]]></programlisting>
vmalloc用来分配物理上不连续的页面内存，使其在逻辑地址上一致。vm_struct是其核心结构，pages是一个数组指针，数组的元素指向分配的离散的物理页帧对应的struct page	*结构。
<programlisting><![CDATA[
static void *__vmalloc_area_node(struct vm_struct *area, gfp_t gfp_mask,
				 pgprot_t prot, int node, void *caller)
{
	......
	nr_pages = (area->size - PAGE_SIZE) >> PAGE_SHIFT;
	array_size = (nr_pages * sizeof(struct page *));

	area->nr_pages = nr_pages;
	/* Please note that the recursion is strictly bounded. */
	if (array_size > PAGE_SIZE) {
		pages = __vmalloc_node(array_size, 1, nested_gfp|__GFP_HIGHMEM,
				PAGE_KERNEL, node, caller);
		area->flags |= VM_VPAGES;
	} else {
		pages = kmalloc_node(array_size, nested_gfp, node);
	}
	area->pages = pages;
	......	
]]></programlisting>
vmalloc的核心函数为__vmalloc_area_node，其中将根据分配的页面大小，如果pages指向的数组大小超过一个页面大小，则通过__vmalloc_node递归调用本函数来分配指针数组，否则将通过kmalloc系统中的kmalloc_node函数来分配。而针对页面的分配均是通过伙伴系统来实现的：
<programlisting><![CDATA[
	for (i = 0; i < area->nr_pages; i++) {
		struct page *page;
		gfp_t tmp_mask = gfp_mask | __GFP_NOWARN;

		if (node < 0)
			page = alloc_page(tmp_mask);
		else
			page = alloc_pages_node(node, tmp_mask, order);

		if (unlikely(!page)) {
			/* Successfully allocated i pages, free them in __vunmap() */
			area->nr_pages = i;
			goto fail;
		}
		area->pages[i] = page;
	}
]]></programlisting>
alloc_page和alloc_pages_node均是伙伴系统提供的接口函数，由此可以看出vmalloc和kmalloc，伙伴系统关系图的由来。
<sect3><title>页表映射</title>

</sect3>
<emphasis>本文正在更新中......</emphasis>
</sect2>
</sect1>
